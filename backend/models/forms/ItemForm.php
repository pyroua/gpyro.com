<?php

namespace backend\models\forms;

use Yii;
use common\models\Item;
use common\traits\ModelTrait;
use yii\base\DynamicModel;
use common\models\ItemOption;
use yii\validators\Validator;

/**
 * Class ItemForm
 *
 */
class ItemForm extends \yii\base\Model
{

    const SCENARIO_UPDATE = 'update';

    use ModelTrait;

   //public $title;
    public $title_i18n_en;
    public $title_i18n_ru;
    public $description_i18n_en;
    public $description_i18n_ru;
    //public $description;
    public $article;
    public $category_id;
    public $price;
    public $video_url;
    public $file;

    private $itemOptions = [];

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            Item::getI18nFieldTitle('title', 'en') => Yii::t('app', 'Title EN'),
            Item::getI18nFieldTitle('title', 'ru') => Yii::t('app', 'Title RU'),
            Item::getI18nFieldTitle('description', 'en') => Yii::t('app', 'Description RU'),
            Item::getI18nFieldTitle('description', 'ru') => Yii::t('app', 'Description EN'),
        ];
    }


    /**
     * @return array
     */
    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_UPDATE] = [
            //'title',
            Item::getI18nFieldTitle('title', 'en'),
            Item::getI18nFieldTitle('title', 'ru'),
            Item::getI18nFieldTitle('description', 'en'),
            Item::getI18nFieldTitle('description', 'ru'),
            //'description',
            'article',
            'price',
            'video_url',
            'file',
            'category_id'
        ];
        return $scenarios;
    }

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [[/*'title', */
                Item::getI18nFieldTitle('title', 'en'),
                Item::getI18nFieldTitle('title', 'ru'),
                Item::getI18nFieldTitle('description', 'en'),
                Item::getI18nFieldTitle('description', 'ru'),
               // 'description',
                'article',
                'price'
            ], 'required'],
            [['category_id'], 'required', 'on' => self::SCENARIO_DEFAULT],
            [['price'], 'double'],
            [['video_url'], 'string'],
            [['file'], 'file', 'extensions' => 'png, jpg'],
        ];
    }

    /**
     * @param int $optionId
     * @throws \Exception
     */
    private function createItemOptionValidators(int $optionId)
    {
        $optionItem = ItemOption::findOne(['id' => $optionId]);
        $fieldName = 'option_id_' . $optionId;

        if (!$optionItem) {
            throw new \Exception('Cant find item option');
        }

        switch ($optionItem->type) {
            case 0:
                /** @var DynamicModel $value */
                $this->addRule([$fieldName], 'integer', ['message' => $optionItem->title . ' must be an integer type']);
                break;

            case 1:
                $this->addRule([$fieldName], 'double', ['message' => $optionItem->title . ' must be a double type']);
                break;

            case 2:
                $this->addRule([$fieldName], 'string', ['message' => $optionItem->title . ' must be a string type']);
                break;

            case 3:
                $this->addRule([$fieldName], 'date', ['format' => 'php:d-m-Y', 'message' => $optionItem->title . ' must be date in format dd-mm-yyyy']);
                break;

            default:
                throw new \Exception('There is no option type to create validator rule');
        }

        if ($optionItem->required) {
            $this->addRule([$fieldName], 'required', ['message' => $optionItem->title . ' required']);
        }

    }

    /**
     * @param string $name
     * @param mixed $value
     * @throws \yii\base\UnknownPropertyException
     */
    public function __set($name, $value)
    {
        if (strpos($name, 'option_id_') !== false) {
            $this->$name = $value;
            return;
        }

        return parent::__set($name, $value); // TODO: Change the autogenerated stub
    }

    /**
     * Adds a validation rule to this model.
     * You can also directly manipulate [[validators]] to add or remove validation rules.
     * This method provides a shortcut.
     * @param string|array $attributes the attribute(s) to be validated by the rule
     * @param mixed $validator the validator for the rule.This can be a built-in validator name,
     * a method name of the model class, an anonymous function, or a validator class name.
     * @param array $options the options (name-value pairs) to be applied to the validator
     * @return $this the model itself
     */
    public function addRule($attributes, $validator, $options = [])
    {
        $validators = $this->getValidators();
        $validators->append(Validator::createValidator($validator, $this, (array)$attributes, $options));

        return $this;
    }

    /**
     * @param array $data
     * @param null $formName
     * @return bool
     * @throws \Exception
     */
    public function load($data, $formName = null)
    {
        foreach ($data[$this->getClassShortName($this)] as $title => $value) {
            if (strpos($title, 'option_id_') !== false) {
                $exploded = explode('option_id_', $title);
                if (array_key_exists(1, $exploded)) {
                    $this->setItemOption($exploded[1], $value);
                    $this->$title = $value;
                    $this->createItemOptionValidators($exploded[1]);

                } else {
                    throw new \Exception('Cant parse iption id');
                }
            }
        }

        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /**
     * @return mixed
     */
    public function getItemOptions()
    {
        return $this->itemOptions;
    }

    /**
     * @param int $id
     * @param string $value
     */
    public function setItemOption(int $id, string $value)
    {
        $this->itemOptions[$id] = $value;
    }


}