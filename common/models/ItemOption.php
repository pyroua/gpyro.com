<?php

namespace common\models;

use Yii;
use yii\base\Exception;

/**
 * This is the model class for table "item_options".
 *
 * @property int $id
 * @property string $title
 * @property string $description
 * @property int $type
 * @property int $measure_id
 * @property string $default_value
 *
 * @property bool $isRequired
 * @property int $categoryId
 *
 * @property ItemOptionCategory[] $categories
 * @property ItemOptionValue[] $itemOptionValues
 */
class ItemOption extends BaseModel
{

    use ContentI18nTrait;

    /* i18n content fields config */
    protected $i18nType = 'item_option';
    public static $i18nFields = [
        'title',
        'description'
    ];

    private $_required = null;
    private $_categoryId = null;

    const TYPE_INT = 'integer';
    const TYPE_DECIMAL = 'decimal';
    const TYPE_STRING = 'string';
    const TYPE_DATE = 'date (dd.mm.yyyy)';
//    const TYPE_CATALOGUE = 'catalogue';

    /**
     * @return array
     */
    public function getTypes()
    {
        return [
            self::TYPE_INT,
            self::TYPE_DECIMAL,
            self::TYPE_STRING,
            self::TYPE_DATE,
            //           self::TYPE_CATALOGUE,
        ];
    }


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'item_options';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [[
                ItemOption::getI18nFieldTitle('title', 'en'),
                ItemOption::getI18nFieldTitle('title', 'ru'),

            ], 'required'],
            [[
                ItemOption::getI18nFieldTitle('description', 'en'),
                ItemOption::getI18nFieldTitle('description', 'ru'),
            ], 'string'],
            [[
                ItemOption::getI18nFieldTitle('title', 'en'),
                ItemOption::getI18nFieldTitle('title', 'ru'),
                'default_value',
                'type'
            ], 'string', 'max' => 255],
            //[['required'], 'string', 'max' => 1],
            [['categories', 'measure_id'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'title' => Yii::t('app', 'Title'),
            'description' => Yii::t('app', 'Description'),
            'type' => Yii::t('app', 'Type'),
            'categories' => Yii::t('app', 'Categories'),
            'measure_id' => Yii::t('app', 'Measure'),
            'default_value' => Yii::t('app', 'Default value'),
            //'required' => Yii::t('app', 'Required'),
        ];
    }

    /**
     * @return array
     */
    public function transactions()
    {
        return [
            'default' => self::OP_ALL,
        ];
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @throws Exception
     */
    public function afterSave($insert, $changedAttributes)
    {
        if ($insert) {
            /** @var ItemOptionCategory $itemOptionCategory */
            foreach ($this->categories as $itemOptionCategory) {
                $itemOptionCategory->setAttribute('option_id', $this->id);
                if (!$itemOptionCategory->save()) {
                    throw new Exception('Save category error');
                }

                // треба всім товарам проставити цей параметр, інакше він ен відобразиться в формі
                // при великій кількості товарів у майбутньому це може працювати дуже довго
                foreach ($itemOptionCategory->category->items as $item) {
                    $itemOptionValue = new ItemOptionValue();
                    $itemOptionValue->setAttributes(['item_id' => $item->id, 'option_id' => $this->id]);
                    $itemOptionValue->save();
                }
            }
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     *
     *
     * @param null $names
     * @param array $except
     * @return array
     */
    public function getAttributes($names = null, $except = [])
    {
        $attrNames = self::attributes();
        $attrNames[] = 'categories';
        $attributes = parent::getAttributes($attrNames); // TODO: Change the autogenerated stub

        return $attributes;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategories()
    {
        return $this->hasMany(ItemOptionCategory::class, ['option_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getItemOptionValues()
    {
        return $this->hasMany(ItemOptionValue::class, ['option_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMeasure()
    {
        return $this->hasone(Measure::class, ['id' => 'measure_id']);
    }

    /**
     * @param array $categories
     */
    public function setCategories($categories)
    {
        $res = [];
        if (is_array($categories)) {
            foreach ($categories as $val) {
                // will save it in afterSave
                $res[] = new ItemOptionCategory(['category_id' => $val]);
            }
        }

        $this->categories = $res;
    }

    /**
     * @return array
     */
    public function getCategoriesAsArray()
    {
        $result = [];
        /** @var ItemOptionCategory $cat */
        foreach ($this->categories as $cat) {
            $result[] = $cat->category_id;
        }

        return $result;
    }

    /**
     * @param array $fields
     * @return array
     */
    public static function getArrayList(array $fields = null)
    {
        $data = self::find()->all();

        $result = [];
        foreach ($data as $val) {
            $result[$val->id] = $val->title;
        }

        return $result;
    }

    /**
     * @return false|int
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function deleteItemOption()
    {
        // delete categories from relations
        /** @var ItemOptionCategory $cat */
        foreach ($this->categories as $cat) {
            $cat->delete();
        }

        // delete from item_option_values
        foreach ($this->itemOptionValues as $optionValue) {
            $optionValue->delete();
        }

        return $this->delete();
    }

    /**
     * @return string
     * @throws \Exception
     */
    public function getIsRequired(): string
    {
        if ($this->_required === null) {
            $this->setIsRequired(ItemOptionCategory::isRequired($this->categoryId, $this->id));
        }

        return $this->_required;
    }

    /**
     * @param $required
     */
    private function setIsRequired($required)
    {
        $this->_required = $required;
    }

    /**
     * @return null
     * @throws \Exception
     */
    public function getCategoryId()
    {
        if ($this->_categoryId == null) {
            throw new \Exception('CategoryId is not set before!');
        }

        return $this->_categoryId;
    }

    /**
     * @param null $categoryId
     */
    public function setCategoryId($categoryId)
    {
        $this->_categoryId = $categoryId;
    }


}
